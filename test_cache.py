import aiohttp
import logging
import time
import asyncio
from typing import Dict, Any, List, Tuple, Optional
import json
import os 
# --- –ò–°–ü–û–õ–¨–ó–£–ï–ú upstash-redis –ò defaultdict ---
from upstash_redis import Redis
from collections import defaultdict
# -----------------------------------------------------
from dotenv import load_dotenv
load_dotenv() 
# --- –î–û–ë–ê–í–õ–ï–ù–û: colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
import colorama
colorama.init()
# -----------------------------------------------------

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
BASE_URL = os.environ.get("RENDER_EXTERNAL_URL", "http://127.0.0.1:8000") # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
# --- –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –≠—Ç–∏ –¢–§ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ api_routes.py!
TIMEFRAMES_TO_TEST = ['1h', '4h', '12h', '1d'] 
CACHE_WAIT_TIMEOUT = 1200  # 20 –º–∏–Ω—É—Ç
CACHE_POLL_INTERVAL = 15 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Redis (–ë–µ—Ä—É—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–∞–∫ –≤ cache_manager.py)
UPSTASH_REDIS_URL = os.environ.get("UPSTASH_REDIS_URL")
UPSTASH_REDIS_TOKEN = os.environ.get("UPSTASH_REDIS_TOKEN")

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚Ññ1: –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ worker.py/api_routes.py ---
REDIS_TASK_QUEUE_KEY = "data_collector_task_queue"
WORKER_LOCK_KEY = "data_collector_lock"
# -----------------------------------------------------------

# –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)
GLOBAL_ERROR_REPORT = defaultdict(dict)
# -----------------------------

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞) ---
class ColoredFormatter(logging.Formatter):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –∫ —É—Ä–æ–≤–Ω—è–º –ª–æ–≥–æ–≤."""
    def __init__(self):
        super().__init__()
        self.colors = {
            'DEBUG': colorama.Fore.CYAN,
            'INFO': colorama.Fore.GREEN,
            'WARNING': colorama.Fore.YELLOW,
            'ERROR': colorama.Fore.RED,
            'CRITICAL': colorama.Back.RED + colorama.Fore.WHITE,
        }

    def format(self, record):
        log_color = self.colors.get(record.levelname, '')
        record.levelname = f"{log_color}{record.levelname}{colorama.Style.RESET_ALL}"
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
        if hasattr(record, 'task_name'):
            record.task_name = f"{colorama.Fore.LIGHTBLUE_EX}{record.task_name}{colorama.Style.RESET_ALL}"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º %s –Ω–∞ {message} –¥–ª—è .format()
        message = record.getMessage()
        record.message = f"{log_color}{message}{colorama.Style.RESET_ALL}" if record.levelno >= logging.WARNING else message
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
        s = super().format(record)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if record.levelno >= logging.WARNING:
            s = s.replace(f"{log_color}{message}{colorama.Style.RESET_ALL}", message)
            
        return s

class TaskNameFilter(logging.Filter):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–º—è –∑–∞–¥–∞—á–∏ asyncio –≤ –ª–æ–≥."""
    def filter(self, record):
        try:
            task = asyncio.current_task()
            record.task_name = task.get_name() if task else 'main'
        except RuntimeError:
            record.task_name = 'main'
        return True

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚Ññ1: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º TypeError ---
# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
colored_formatter = ColoredFormatter() # <-- –£–ë–ò–†–ê–ï–ú –ê–†–ì–£–ú–ï–ù–¢–´

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(task_name)s] - %(message)s', # <-- –í–û–ó–í–†–ê–©–ê–ï–ú FORMAT
    datefmt='%H:%M:%S' # <-- –í–û–ó–í–†–ê–©–ê–ï–ú DATEFMT
)
log = logging.getLogger()
# –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
for handler in log.handlers:
    handler.setFormatter(colored_formatter)
# --- –ö–æ–Ω–µ—Ü –ò–∑–º–µ–Ω–µ–Ω–∏—è ---

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
task_filter = TaskNameFilter()
for handler in log.handlers:
    handler.addFilter(task_filter)
# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---


def _clear_all_caches():
    """
    (–ò–°–ü–†–ê–í–õ–ï–ù–û 2.0)
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ cache:*, data_collector_lock –∏–∑ Upstash Redis.
    –ù–ï –¢–†–û–ì–ê–ï–¢ –û–ß–ï–†–ï–î–¨ –ó–ê–î–ê–ß (REDIS_TASK_QUEUE_KEY)!
    """
    if not UPSTASH_REDIS_URL or not UPSTASH_REDIS_TOKEN:
        log.error("‚ùå –û–ß–ò–°–¢–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Upstash REDIS_URL/TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞.")
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç Upstash Redis
        r = Redis(url=UPSTASH_REDIS_URL, token=UPSTASH_REDIS_TOKEN)
        
        keys_to_delete = []
        cursor = 0
        while True:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SCAN –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π. Upstash –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏.
            cursor, keys = r.scan(cursor=cursor, match='cache:*')
            keys_to_delete.extend(keys)
            if cursor == 0:
                break

        # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚Ññ2: –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –±–ª–æ–∫–∏—Ä–æ–≤–∫—É ---
        keys_to_delete.append(WORKER_LOCK_KEY)
        # --------------------------------------------------------
        
        if keys_to_delete:
            # r.delete –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *args
            deleted_count = r.delete(*keys_to_delete)
            log.info(f"üßπ‚úÖ –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–û {deleted_count} –ö–õ–Æ–ß–ï–ô –ö–≠–®–ê –ò –ë–õ–û–ö–ò–†–û–í–ö–ò –ò–ó REDIS.")
            log.warning(f"üßπ –û–ß–ï–†–ï–î–¨ –ó–ê–î–ê–ß (data_collector_task_queue) –ù–ï –¢–†–û–ù–£–¢–ê.")
        else:
            log.info("üßπ –ù–ï –ù–ê–ô–î–ï–ù–û –ö–õ–Æ–ß–ï–ô –ö–≠–®–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø. REDIS –ß–ò–°–¢.")
        
        log.info(f"üßπ –ö–≠–® –û–ß–ò–©–ï–ù. –ü–†–û–î–û–õ–ñ–ê–Æ...")
            
    except Exception as e:
        log.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï UPSTASH REDIS: {e}", exc_info=True)
        

def validate_data_collection(data: Dict[str, Any], timeframe: str) -> Tuple[bool, List[str]]:
    """
    (–ò–ó–ú–ï–ù–ï–ù–û)
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ: Audit Report (—Å–µ—Ä–≤–µ—Ä) –∏ –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫–ª–∏–µ–Ω—Ç).
    –û–®–ò–ë–ö–ê KLINES (missing_klines) –¢–ï–ü–ï–†–¨ –ù–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø (—Ç–æ–ª—å–∫–æ Warning).
    """
    is_valid = True
    test_errors = []
    
    # --- –ë–ê–ó–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ ---
    expected_keys = ["openTime", "closeTime", "timeframe", "data", "audit_report"]
    if any(k not in data for k in expected_keys):
        log.error(f"   -> ‚ùå –ü–†–û–í–ê–õ: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {[k for k in expected_keys if k not in data]}.")
        test_errors.append("MISSING_TOP_KEYS")
        return False, test_errors

    # --- –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ 'audit_report' (–°–∞–º–æ–æ—Ç—á–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞) ---
    audit_report = data.get('audit_report')
    missing_klines = audit_report.get("missing_klines", [])
    missing_oi_audit = audit_report.get("missing_oi", [])
    missing_fr_audit = audit_report.get("missing_fr", [])
    
    audit_report_success = True

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: missing_klines —Ç–µ–ø–µ—Ä—å WARNING, –∞ –Ω–µ ERROR ---
    if missing_klines:
        log.warning(f"   -> üìä‚ö†Ô∏è  –ê–£–î–ò–¢ [KLINES]: –°–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö Klines –¥–ª—è {len(missing_klines)} –º–æ–Ω–µ—Ç.")
        test_errors.append(f"AUDIT_KLINES_{len(missing_klines)}")
        GLOBAL_ERROR_REPORT[timeframe]['missing_klines'] = missing_klines
        # audit_report_success = False # <-- –ë–û–õ–¨–®–ï –ù–ï –°–ß–ò–¢–ê–ï–ú –≠–¢–û –ü–†–û–í–ê–õ–û–ú –¢–ï–°–¢–ê
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    if missing_oi_audit or missing_fr_audit:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∞—É–¥–∏—Ç–∞, –Ω–æ –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç—á–µ—Ç–µ
        log.error(f"   -> üìä‚ùå –ê–£–î–ò–¢ [OI/FR]: –°–µ—Ä–≤–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–ø—É—Å–∫–∏ (OI:{len(missing_oi_audit)}, FR:{len(missing_fr_audit)}).")
        if missing_oi_audit:
            test_errors.append(f"AUDIT_OI_{len(missing_oi_audit)}")
            GLOBAL_ERROR_REPORT[timeframe]['audit_oi'] = missing_oi_audit
        if missing_fr_audit:
            test_errors.append(f"AUDIT_FR_{len(missing_fr_audit)}")
            GLOBAL_ERROR_REPORT[timeframe]['audit_fr'] = missing_fr_audit
        audit_report_success = False
    
    if audit_report_success and not missing_klines: # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –ò –Ω–µ—Ç klines
         log.info("   -> ‚úÖ –ê—É–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
         GLOBAL_ERROR_REPORT[timeframe]['audit_success'] = True
    elif audit_report_success and missing_klines: # –ï—Å–ª–∏ OI/FR —Ö–æ—Ä–æ—à–æ, –Ω–æ klines –ø—Ä–æ–ø—É—â–µ–Ω—ã
        log.info("   -> ‚úÖ –ê—É–¥–∏—Ç OI/FR –ø—Ä–æ–π–¥–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∏ Klines –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã).")
        GLOBAL_ERROR_REPORT[timeframe]['audit_success'] = True


    # --- –≠–¢–ê–ü 2: –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π + –î–ª–∏–Ω–∞ ---
    log.info("\n--- –≠—Ç–∞–ø 2: –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OI/FR –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–∞—Ö ---")
    deep_check_success = True
    data_list = data.get("data", [])
    
    # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –¥–ª–∏–Ω–µ –¥–ª—è 12h –∏ 1d (–¢–í–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï)
    if timeframe in ['1d', '12h']:
        MIN_CANDLES = 100 
    else:
        MIN_CANDLES = 399

    if not data_list:
         log.error("   -> ‚ùå –ü–†–û–í–ê–õ: –°–ø–∏—Å–æ–∫ 'data' –ø—É—Å—Ç.")
         test_errors.append("EMPTY_DATA_LIST")
         is_valid = False
         return is_valid, test_errors

    printed_sample_candles = False
    
    # --- –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
    for coin_data in data_list:
        symbol = coin_data.get('symbol', 'N/A')
        candles = coin_data.get('data', [])
        coin_success = True
        
        # 2.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã (–¢–û–õ–¨–ö–û WARNING)
        if len(candles) < MIN_CANDLES:
            log.warning(f"   -> ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï [{symbol}]: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(candles)} —Å–≤–µ—á–µ–π (–º–µ–Ω–µ–µ {MIN_CANDLES} —à—Ç).")

        # 2.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ OI/FR –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–∞—Ö
        oi_fr_missing_in_coin = []
        if len(candles) >= 3:
            for i, candle in enumerate(candles[-3:]):
                candle_name = f"T-{2-i}" # (T-2, T-1, T-0)

                if 'openInterest' not in candle or candle.get('openInterest') is None:
                    oi_fr_missing_in_coin.append(f"OI_{candle_name}")
                if 'fundingRate' not in candle or candle.get('fundingRate') is None:
                    oi_fr_missing_in_coin.append(f"FR_{candle_name}")

            if oi_fr_missing_in_coin:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–∏—Ä–∞—Ç—å –ª–æ–≥
                if deep_check_success:
                    log.error(f"   -> ‚ùå –ü–†–û–í–ê–õ OI/FR: –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –º–æ–Ω–µ—Ç–∞ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º: {symbol}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ.")
                
                deep_check_success = False
                coin_success = False

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫–∏ OI/FR –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ---
        if not coin_success and oi_fr_missing_in_coin:
            if 'oi_fr_failures' not in GLOBAL_ERROR_REPORT[timeframe]:
                GLOBAL_ERROR_REPORT[timeframe]['oi_fr_failures'] = []
            
            GLOBAL_ERROR_REPORT[timeframe]['oi_fr_failures'].append({
                'symbol': symbol,
                'reason': ", ".join(oi_fr_missing_in_coin)
            })
        
        # --- –í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ —Å–≤–µ—á–µ–π (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑) ---
        if not printed_sample_candles and candles:
            log.info(f"--- –ü—Ä–∏–º–µ—Ä —Å–≤–µ—á–µ–π (–¥–ª—è {symbol}) ---")
            last_two_candles = candles[-2:]
            for i, candle in enumerate(last_two_candles):
                ot = candle.get('openTime')
                ct = candle.get('closeTime')
                o = candle.get('openPrice')
                c = candle.get('closePrice')
                oi = candle.get('openInterest', 'N/A') 
                fr = candle.get('fundingRate', 'N/A')
                # –£–¥–∞–ª—è–µ–º H –∏ L –∏–∑ –ª–æ–≥–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                log.info(f"     [T-{len(last_two_candles)-1-i}]: OT: {ot}, CT: {ct}, O: {o}, C: {c}, OI: {oi}, FR: {fr}")
            printed_sample_candles = True
            
    if deep_check_success:
        log.info("   -> ‚úÖ –£–°–ü–ï–• –≠–¢–ê–ü–ê 2: –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ OI/FR –ø—Ä–æ–π–¥–µ–Ω–∞.")
        GLOBAL_ERROR_REPORT[timeframe]['deep_check_success'] = True
    else:
         log.error("   -> ‚ùå –ü–†–û–í–ê–õ –≠–¢–ê–ü–ê 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ OI/FR.")
         is_valid = False

    # –û–±—â–∞—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–≤—É—Ö —ç—Ç–∞–ø–æ–≤
    # (audit_report_success —Ç–µ–ø–µ—Ä—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç klines)
    is_valid = is_valid and audit_report_success
    
    return is_valid, test_errors


async def run_single_test(session: aiohttp.ClientSession, timeframe: str) -> Tuple[str, bool]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ *–ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ* —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞.
    (–ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω)
    """
    asyncio.current_task().set_name(f"TF-{timeframe}")

    post_url = f"{BASE_URL}/get-market-data"
    cache_url = f"{BASE_URL}/cache/{timeframe}"
    start_time = time.time()

    try:
        # --- –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ (POST) ---
        log.info(f"–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /get-market-data...")
        post_timeout = aiohttp.ClientTimeout(total=30)
        async with session.post(post_url, json={"timeframe": timeframe}, timeout=post_timeout) as response:

            if response.status == 202:
                log.info(f"–®–∞–≥ 1 ‚úÖ –£–°–ü–ï–•: –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ (–°—Ç–∞—Ç—É—Å 202).")
            elif response.status == 409:
                log.warning(f"–®–∞–≥ 1 ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (–°—Ç–∞—Ç—É—Å 409). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")
            elif response.status == 400:
                 # --- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê (–µ—Å–ª–∏ –¢–§ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º) ---
                 response_text = await response.text()
                 log.critical(f"–®–∞–≥ 1 ‚ùå –ü–†–û–í–ê–õ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô): –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 400. –û—Ç–≤–µ—Ç: {response_text}. –¢–∞–π–º—Ñ—Ä–µ–π–º '{timeframe}' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ api_routes.py.")
                 return timeframe, False
            # --------------------------------------------------------
            else:
                response_text = await response.text()
                log.error(f"–®–∞–≥ 1 ‚ùå –ü–†–û–í–ê–õ: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status}. –û—Ç–≤–µ—Ç: {response_text[:150]}")
                return timeframe, False

    except Exception as e:
        log.error(f"–®–∞–≥ 1 ‚ùå –ü–†–û–í–ê–õ: –û—à–∏–±–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞: {e}")
        return timeframe, False

    # --- –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –∫—ç—à–∞ (GET) ---
    log.info(f"–®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –∫—ç—à–∞ (–¢–∞–π–º–∞—É—Ç {CACHE_WAIT_TIMEOUT}—Å)...")
    wait_start_time = time.time()
    get_timeout = aiohttp.ClientTimeout(total=30)

    while time.time() - wait_start_time < CACHE_WAIT_TIMEOUT:
        try:
            async with session.get(cache_url, timeout=get_timeout) as response:

                if response.status == 200:
                    log.info(f"–®–∞–≥ 2 ‚úÖ –£–°–ü–ï–•: –ö—ç—à –ø–æ–ª—É—á–µ–Ω (–°—Ç–∞—Ç—É—Å 200)!")

                    # --- –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è ---
                    try:
                        json_data = await response.json()
                        log.info(f"–®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
                        is_valid, _ = validate_data_collection(json_data, timeframe) 
                        
                        GLOBAL_ERROR_REPORT[timeframe]['success'] = is_valid
                        GLOBAL_ERROR_REPORT[timeframe]['raw_data'] = json_data # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                        
                        total_time = time.time() - start_time
                        
                        # --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ ---
                        if is_valid:
                            # –ï—Å–ª–∏ klines –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã, —ç—Ç–æ warning, –∞ –Ω–µ success
                            if GLOBAL_ERROR_REPORT[timeframe].get('missing_klines'):
                                log.warning(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (Klines –ø—Ä–æ–ø—É—â–µ–Ω—ã)'}")
                            else:
                                log.info(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•'}")
                        else:
                            log.error(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –ü–†–û–í–ê–õ (OI/FR)'}")
                        # -----------------------------
                            
                        return timeframe, is_valid

                    except Exception as e:
                         log.error(f"–®–∞–≥ 3 ‚ùå –ü–†–û–í–ê–õ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", exc_info=True)
                         return timeframe, False


                elif response.status == 404:
                    log.info(f"–®–∞–≥ 2 ‚è≥ –û–ñ–ò–î–ê–ù–ò–ï: –ö—ç—à –ø–æ–∫–∞ –ø—É—Å—Ç (404). –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CACHE_POLL_INTERVAL}—Å...")
                else:
                    log.warning(f"–®–∞–≥ 2 ‚ö†Ô∏è  –û–®–ò–ë–ö–ê –û–ñ–ò–î–ê–ù–ò–Ø: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status}. –ü–æ–≤—Ç–æ—Ä...")

        except Exception as e:
            log.warning(f"–®–∞–≥ 2 ‚ö†Ô∏è  –û–®–ò–ë–ö–ê –û–ñ–ò–î–ê–ù–ò–Ø: –û—à–∏–±–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞/–¢–∞–π–º–∞—É—Ç: {e}. –ü–æ–≤—Ç–æ—Ä...")

        await asyncio.sleep(CACHE_POLL_INTERVAL)

    # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    log.error(f"–®–∞–≥ 2 ‚ùå –ü–†–û–í–ê–õ: –¢–∞–π–º–∞—É—Ç! –ö—ç—à –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {CACHE_WAIT_TIMEOUT} —Å–µ–∫—É–Ω–¥.")
    return timeframe, False


async def run_cache_check_only(session: aiohttp.ClientSession, timeframe: str) -> Tuple[str, bool]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª —Ç–µ—Å—Ç–∞ –¥–ª—è *–∑–∞–≤–∏—Å–∏–º–æ–≥–æ* —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (8h).
    (–ö–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω)
    """
    asyncio.current_task().set_name(f"TF-{timeframe}")

    cache_url = f"{BASE_URL}/cache/{timeframe}"
    start_time = time.time()

    # --- –®–∞–≥ 1: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å ---
    log.info(f"–®–∞–≥ 1: –ü—Ä–æ–ø—É—Å–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞).")

    # --- –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –∫—ç—à–∞ (GET) ---
    log.info(f"–®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –∫—ç—à–∞ (–¢–∞–π–º–∞—É—Ç {CACHE_WAIT_TIMEOUT}—Å)...")
    wait_start_time = time.time()
    get_timeout = aiohttp.ClientTimeout(total=30)

    while time.time() - wait_start_time < CACHE_WAIT_TIMEOUT:
        try:
            async with session.get(cache_url, timeout=get_timeout) as response:

                if response.status == 200:
                    log.info(f"–®–∞–≥ 2 ‚úÖ –£–°–ü–ï–•: –ö—ç—à –ø–æ–ª—É—á–µ–Ω (–°—Ç–∞—Ç—É—Å 200)!")

                    # --- –®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è ---
                    try:
                        json_data = await response.json()
                        log.info(f"–®–∞–≥ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
                        is_valid, _ = validate_data_collection(json_data, timeframe) 
                        
                        GLOBAL_ERROR_REPORT[timeframe]['success'] = is_valid
                        GLOBAL_ERROR_REPORT[timeframe]['raw_data'] = json_data # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                        
                        total_time = time.time() - start_time
                        
                        # --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ ---
                        if is_valid:
                            if GLOBAL_ERROR_REPORT[timeframe].get('missing_klines'):
                                log.warning(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (Klines –ø—Ä–æ–ø—É—â–µ–Ω—ã)'}")
                            else:
                                log.info(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•'}")
                        else:
                            log.error(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}—Å. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –ü–†–û–í–ê–õ (OI/FR)'}")
                        # -----------------------------
                            
                        return timeframe, is_valid

                    except Exception as e:
                         log.error(f"–®–∞–≥ 3 ‚ùå –ü–†–û–í–ê–õ: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", exc_info=True)
                         return timeframe, False

                elif response.status == 404:
                    log.info(f"–®–∞–≥ 2 ‚è≥ –û–ñ–ò–î–ê–ù–ò–ï: –ö—ç—à –ø–æ–∫–∞ –ø—É—Å—Ç (404). –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CACHE_POLL_INTERVAL}—Å...")
                else:
                    log.warning(f"–®–∞–≥ 2 ‚ö†Ô∏è  –û–®–ò–ë–ö–ê –û–ñ–ò–î–ê–ù–ò–Ø: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status}. –ü–æ–≤—Ç–æ—Ä...")

        except Exception as e:
            log.warning(f"–®–∞–≥ 2 ‚ö†Ô∏è  –û–®–ò–ë–ö–ê –û–ñ–ò–î–ê–ù–ò–Ø: –û—à–∏–±–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞/–¢–∞–π–º–∞—É—Ç: {e}. –ü–æ–≤—Ç–æ—Ä...")

        await asyncio.sleep(CACHE_POLL_INTERVAL)

    # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    log.error(f"–®–∞–≥ 2 ‚ùå –ü–†–û–í–ê–õ: –¢–∞–π–º–∞—É—Ç! –ö—ç—à –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {CACHE_WAIT_TIMEOUT} —Å–µ–∫—É–Ω–¥.")
    return timeframe, False


def print_sample_candle(timeframe: str, error_report: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–º–µ—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞."""
    raw_data = error_report.get('raw_data')
    if not raw_data or not isinstance(raw_data, dict):
        print("       üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–≤–µ—á–∏.")
        return

    data_list = raw_data.get('data', [])
    if not data_list:
        print("       üîç –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–∏—Å–∫–∞ 'data' –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–≤–µ—á–∏.")
        return

    # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    sample_coin = None
    sample_candle = None
    for coin_data in data_list:
        symbol = coin_data.get('symbol', 'N/A')
        candles = coin_data.get('data', [])
        # –ò—â–µ–º —Å–≤–µ—á—É —Å OI –∏ FR
        for candle in candles:
            if 'openInterest' in candle and 'fundingRate' in candle and candle.get('openInterest') is not None and candle.get('fundingRate') is not None:
                sample_coin = symbol
                sample_candle = candle
                break
        if sample_candle:
            break

    if sample_candle:
        print(f"       üìå –ü—Ä–∏–º–µ—Ä –ù–û–†–ú–ê–õ–¨–ù–û–ô —Å–≤–µ—á–∏ (–∏–∑ {sample_coin}):")
        print(f"             - openTime: {sample_candle.get('openTime', 'N/A')}")
        print(f"             - closeTime: {sample_candle.get('closeTime', 'N/A')}")
        print(f"             - openPrice: {sample_candle.get('openPrice', 'N/A')}")
        print(f"             - highPrice: {sample_candle.get('highPrice', 'N/A')}")
        print(f"             - lowPrice: {sample_candle.get('lowPrice', 'N/A')}")
        print(f"             - closePrice: {sample_candle.get('closePrice', 'N/A')}")
        print(f"             - volume: {sample_candle.get('volume', 'N/A')}")
        # –£–±—Ä–∞–Ω—ã –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        print(f"             - openInterest: {sample_candle.get('openInterest', 'N/A')}")
        print(f"             - fundingRate: {sample_candle.get('fundingRate', 'N/A')}")
    else:
        print(f"       üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ —Å –ø–æ–ª–Ω—ã–º–∏ OI/FR –≤ –∫—ç—à–µ –¥–ª—è {timeframe}.")


async def main_test():
    """
    (–ò–ó–ú–ï–ù–ï–ù–û)
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û, —É–ø—Ä–∞–≤–ª—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, –∏ –≤—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
    """
    log.info(f"--- üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –° –£–ß–ï–¢–û–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---")
    log.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {TIMEFRAMES_TO_TEST}")
    log.info(f"URL –°–µ—Ä–≤–µ—Ä–∞: {BASE_URL}")
    
    # 0. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    _clear_all_caches()

    start_time = time.time()
    
    dependent_map = {'8h': '4h'}
    all_tasks_to_run = set(TIMEFRAMES_TO_TEST)
    
    primary_tasks_tf = []
    dependent_tasks_tf = []
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º 8h, –µ—Å–ª–∏ 4h –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ (–∫–∞–∫ —Ç—ã –∏ –ø—Ä–æ—Å–∏–ª)
    if '4h' in all_tasks_to_run and '8h' not in all_tasks_to_run:
        log.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω '4h'. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é '8h' –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫.")
        all_tasks_to_run.add('8h')

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏
    for tf in all_tasks_to_run:
        dependency = dependent_map.get(tf)
        if dependency and dependency in all_tasks_to_run:
            dependent_tasks_tf.append(tf)
        elif dependency and dependency not in all_tasks_to_run:
            log.warning(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {tf} —Ç—Ä–µ–±—É–µ—Ç {dependency}, –Ω–æ {dependency} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. {tf} –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
        else:
            primary_tasks_tf.append(tf)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ ---
    primary_tasks_tf.sort() 
    log.info(f"–ü–µ—Ä–≤–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û): {primary_tasks_tf}")
    # --------------------------------------------------------------------
    log.info(f"–ó–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ): {dependent_tasks_tf}")

    session_timeout = aiohttp.ClientTimeout(total=CACHE_WAIT_TIMEOUT + 60)
    results_map = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤

    async with aiohttp.ClientSession(timeout=session_timeout) as session:
        
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
        if primary_tasks_tf:
            log.info("\n--- üì¶ –ó–ê–ü–£–°–ö –ü–ï–†–í–ò–ß–ù–´–• –ó–ê–î–ê–ß (–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û) ---")
            
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–Ω asyncio.gather, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ü–∏–∫–ª for ---
            for tf in primary_tasks_tf:
                log.info(f"\n--- üß™ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –î–õ–Ø: {tf.upper()} ---")
                tf_result, success = await run_single_test(session, tf)
                results_map[tf_result] = success
                if not success:
                    log.error(f"--- ‚ùå –ü–†–û–í–ê–õ –¢–ï–°–¢–ê –î–õ–Ø: {tf.upper()}. ---")
                    # (–ú—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏)
                log.info(f"--- üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ê –î–õ–Ø: {tf.upper()} ---")
            # --- –ö–æ–Ω–µ—Ü –ò–∑–º–µ–Ω–µ–Ω–∏—è ---
        else:
            log.warning("‚ö†Ô∏è  –ù–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")

        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–õ–æ–≥–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞)
        if dependent_tasks_tf:
            log.info("\n--- üîó –ó–ê–ü–£–°–ö –ó–ê–í–ò–°–ò–ú–´–• –ó–ê–î–ê–ß ---")
            for tf in dependent_tasks_tf:
                dependency = dependent_map[tf] 
                
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ results_map[dependency] == True –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ Warning (–µ—Å—Ç—å –≤ –æ—Ç—á–µ—Ç–µ)
                # (–¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –±—ã–ª 100% –ü–†–û–í–ê–õ–ï–ù (False))
                parent_success = results_map.get(dependency) 
                
                if parent_success is True:
                    log.info(f"\n--- üß™ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –î–õ–Ø (–ó–∞–≤–∏—Å–∏–º—ã–π): {tf.upper()} ---")
                    log.info(f"–¢–µ—Å—Ç '{dependency}' –ø—Ä–æ—à–µ–ª. –ó–∞–ø—É—Å–∫–∞—é –∑–∞–≤–∏—Å–∏–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è '{tf}'...")
                    tf_result, success = await run_cache_check_only(session, tf)
                    results_map[tf_result] = success
                    log.info(f"--- üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ê –î–õ–Ø: {tf.upper()} ---")
                else:
                    log.error(f"–¢–µ—Å—Ç '{dependency}' ‚ùå –ü–†–û–í–ê–õ–ï–ù (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OI/FR). –ó–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è '{tf}' –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                    results_map[tf] = False 
        
    total_duration = time.time() - start_time
    log.info(f"\n--- üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù (–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}—Å) ---")

    # 3. –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö
    failed_tests = []
    warn_tests = []
    total_tests_run = len(all_tasks_to_run)
    success_count = 0

    for timeframe in sorted(all_tasks_to_run): # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        success = results_map.get(timeframe, False)
        report = GLOBAL_ERROR_REPORT.get(timeframe, {})
        
        if success:
            if report.get('missing_klines'):
                log.warning(f"   [~] ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {timeframe} (–ü—Ä–æ–ø—É—â–µ–Ω—ã Klines)")
                warn_tests.append(timeframe)
            else:
                log.info(f"   [+] ‚úÖ –£–°–ü–ï–•: {timeframe}")
                success_count += 1
        else:
            log.error(f"   [-] ‚ùå –ü–†–û–í–ê–õ: {timeframe} (–ü—Ä–æ–ø—É—â–µ–Ω OI/FR –∏–ª–∏ –¢–∞–π–º–∞—É—Ç)")
            failed_tests.append(timeframe)

    if failed_tests or warn_tests:
        print("\n" + "="*60)
        print(f"{'üìä –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ê–• –ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–•':^60}")
        print("="*60)

        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –ü–†–û–í–ê–õ–´ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        for tf in sorted(failed_tests): 
            report = GLOBAL_ERROR_REPORT.get(tf, {})
            
            print(f"\nüìä –¢–ê–ô–ú–§–†–ï–ô–ú: {tf.upper()}")
            print("-" * 40)
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ‚ùå –ü–†–û–í–ê–õ")
            
            if report.get('missing_klines'):
                print(f"   üìà [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï Klines]: –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å Klines –¥–ª—è {len(report['missing_klines'])} –º–æ–Ω–µ—Ç.")
                print(f"     –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {report['missing_klines']}")

            if report.get('audit_oi'):
                print(f"   üìä [–ü–†–û–í–ê–õ –ê–£–î–ò–¢–ê OI]: –°–µ—Ä–≤–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(report['audit_oi'])} –º–æ–Ω–µ—Ç –±–µ–∑ OI (–ø–æ—Å–ª. —Å–≤–µ—á–∞).")
                print(f"     –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {report['audit_oi']}")
            if report.get('audit_fr'):
                print(f"   üí∞ [–ü–†–û–í–ê–õ –ê–£–î–ò–¢–ê FR]: –°–µ—Ä–≤–µ—Ä –æ–±–Ω–∞—Ä—É–∂–∏–ª {len(report['audit_fr'])} –º–æ–Ω–µ—Ç –±–µ–∑ FR (–ø–æ—Å–ª. —Å–≤–µ—á–∞).")
                print(f"     –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {report['audit_fr']}")

            if report.get('oi_fr_failures'):
                print(f"   üß™ [–ü–†–û–í–ê–õ –ü–†–û–í–ï–†–ö–ò OI/FR]: –ù–∞–π–¥–µ–Ω–æ {len(report['oi_fr_failures'])} –º–æ–Ω–µ—Ç, –≥–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OI/FR –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–∞—Ö.")
                for item in report['oi_fr_failures']: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
                    print(f"     - {item['symbol']}: {item['reason']}")
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å–≤–µ—á–∏, –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è
            print(f"\n   üîç –ü—Ä–∏–º–µ—Ä –ù–û–†–ú–ê–õ–¨–ù–û–ô —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
            print_sample_candle(tf, report)

        # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (–Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        for tf in sorted(warn_tests): 
            report = GLOBAL_ERROR_REPORT.get(tf, {})
            
            print(f"\nüìä –¢–ê–ô–ú–§–†–ï–ô–ú: {tf.upper()}")
            print("-" * 40)
            print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
            
            if report.get('missing_klines'):
                print(f"   üìà [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï Klines]: –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å Klines –¥–ª—è {len(report['missing_klines'])} –º–æ–Ω–µ—Ç.")
                print(f"     –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {report['missing_klines']}")
            else:
                print("   (–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–º. –ª–æ–≥)")


        print("="*60 + "\n")
    else:
        log.info(f"\n‚úÖ –ò—Ç–æ–≥: –£–°–ü–ï–•. –í—Å–µ {total_tests_run} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã.")

    # --- –í—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ 8h (–í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï) ---
    if '8h' in all_tasks_to_run:
        log.info(f"\n--- üîé –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û [8H] ---")
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–µ—Å—Ç 8h –≤–æ–æ–±—â–µ –ø—Ä–æ–π–¥–µ–Ω (True) ---
        if results_map.get('8h') is not True:
            log.error("   ‚ùå –¢–µ—Å—Ç 8h –Ω–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω (–¢–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—Ä–æ–≤–∞–ª 4h). –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        else:
            raw_data_8h = GLOBAL_ERROR_REPORT.get('8h', {}).get('raw_data', {})
            data_list_8h = raw_data_8h.get('data', [])
            
            if not data_list_8h:
                log.error("   ‚ùå –ü–†–û–í–ê–õ 8H: –ö—ç—à –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Å–ø–∏—Å–æ–∫ 'data' –≤ –Ω–µ–º –ü–£–°–¢.")
            else:
                num_coins_8h = len(data_list_8h)
                num_candles_8h = 0
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                first_coin_data = data_list_8h[0]
                first_coin_symbol = first_coin_data.get('symbol', 'N/A')
                first_coin_candles = first_coin_data.get('data', [])
                num_candles_8h = len(first_coin_candles)

                log.info(f"   [–û–±—â–∞—è]: –ù–∞–π–¥–µ–Ω–æ {num_coins_8h} –º–æ–Ω–µ—Ç.")
                log.info(f"   [–û–±—â–∞—è]: –ù–∞–π–¥–µ–Ω–æ {num_candles_8h} —Å–≤–µ—á–µ–π (–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ {first_coin_symbol}).")
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∏–Ω–≥–∞
                if num_candles_8h >= 2:
                    c0_ot = first_coin_candles[0].get('openTime', 0)
                    c1_ot = first_coin_candles[1].get('openTime', 0)
                    time_diff_ms = c1_ot - c0_ot
                    time_diff_hours = time_diff_ms / (1000 * 60 * 60)
                    
                    if time_diff_hours == 8:
                        log.info(f"   [–¢–∞–π–º–∏–Ω–≥]: ‚úÖ OK (–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏ {time_diff_hours} —á–∞—Å–æ–≤).")
                    else:
                        log.error(f"   [–¢–∞–π–º–∏–Ω–≥]: ‚ùå –ü–†–û–í–ê–õ (–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏ {time_diff_hours} —á–∞—Å–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å 8).")
                        log.error(f"      (C0: {c0_ot}, C1: {c1_ot})")
                else:
                    log.warning("   [–¢–∞–π–º–∏–Ω–≥]: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∏–Ω–≥–∞.")
                    
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ OI/FR
                if num_candles_8h >= 3:
                    missing_oi_fr_8h = []
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º T-0, T-1, T-2
                    for i, candle in enumerate(first_coin_candles[-3:]):
                        candle_name = f"T-{2-i}"
                        if candle.get('openInterest') is None:
                            missing_oi_fr_8h.append(f"OI_{candle_name}")
                        if candle.get('fundingRate') is None:
                            missing_oi_fr_8h.append(f"FR_{candle_name}")
                    
                    if not missing_oi_fr_8h:
                        log.info(f"   [OI/FR]: ‚úÖ OK (OI –∏ FR –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–≤–µ—á–∞—Ö).")
                    else:
                        log.error(f"   [OI/FR]: ‚ùå –ü–†–û–í–ê–õ (–ù–∞ –ø—Ä–∏–º–µ—Ä–µ {first_coin_symbol} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_oi_fr_8h)}).")
                else:
                    log.warning("   [OI/FR]: ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OI/FR.")
    # -------------------------------------------

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if failed_tests:
        exit(1)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ main_test –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
if __name__ == "__main__":
    from collections import defaultdict # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è defaultdict
    try:
        asyncio.run(main_test())
    except KeyboardInterrupt:
        log.warning("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
